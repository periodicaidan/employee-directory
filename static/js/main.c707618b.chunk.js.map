{"version":3,"sources":["components/Form/Form.jsx","components/Form/Input.jsx","components/Form/Select.jsx","utils/EmployeesContext.jsx","components/AddEmployeeModal.jsx","components/Table/Table.jsx","components/Table/THead.jsx","components/Table/TRow.jsx","components/Table/TData.jsx","components/Table/THeaderCell.jsx","components/EmployeeTable.jsx","components/pages/Home.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["FormGroup","props","className","children","Input","label","htmlFor","name","type","id","onChange","value","tip","Select","defaultValue","EmployeesContext","React","createContext","AddEmployeeModal","employees","useContext","useState","firstName","lastName","department","role","managerId","undefined","employeeState","setEmployeeState","saveEmployee","employee","onComplete","e","target","parseInt","map","onClick","data-dismiss","Table","tableClasses","dark","striped","bordered","hoverable","small","reduce","acc","next","toggle","THead","theadClass","light","TRow","context","TData","THeaderCell","EmployeeTable","sortCriterion","setSortCriterion","sort","e1","e2","field","p1","p2","compareEmployeesBy","manager","filter","m","Home","employeeList","setEmployees","data-toggle","data-target","Provider","newEmployee","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c707618b.chunk.js","sourcesContent":["import React from 'react';\n\n// This is probably an anti-pattern\nfunction Form(props) {\n    return (\n        <form>\n            {props.children}\n        </form>\n    );\n}\n\nfunction FormGroup(props) {\n    return (\n        <div className=\"form-group\">\n            {props.children}\n        </div>\n    )\n}\n\nexport {\n    Form,\n    FormGroup\n};","import React from 'react';\nimport { FormGroup } from './Form';\n\n/**\n * A Bootstrap input form control with optional label and tip text\n */\nexport default function Input(props) {\n    return (\n        <FormGroup>\n            {props.label && <label htmlFor={props.name}>{props.label}</label>}\n            <input\n                type={props.type ?? 'text'}\n                className=\"form-control\"\n                name={props.name}\n                id={props.name}\n                onChange={props.onChange}\n                value={props.value}\n            />\n            {props.tip && <small className=\"form-text text-muted\">{props.tip}</small>}\n        </FormGroup>\n    );\n}","import React from 'react';\nimport { FormGroup } from './Form';\n\n/**\n * A dropdown menu with an optional label\n */\nexport default function Select(props) {\n    return (\n        <FormGroup>\n            {props.label && <label htmlFor={props.name}>{props.label}</label>}\n            <select \n                name={props.name} \n                id={props.name} \n                onChange={props.onChange} \n                value={props.value}\n                defaultValue={props.defaultValue}\n            >\n                {props.children}\n            </select>\n        </FormGroup>\n    );\n}","import React from 'react';\n\nconst EmployeesContext = React.createContext([]);\n\nexport default EmployeesContext;","import React, { useState, useContext } from 'react';\nimport { Input, Select } from './Form';\nimport EmployeesContext from '../utils/EmployeesContext'\n\n/**\n * A modal containing a form for adding an employee to the table\n * \n * Takes an `onComplete` property, which is a callback that is called when the \"Save\"\n * button is clicked and shall perform some logic on the data entered in the fields.\n */\nexport default function AddEmployeeModal(props) {\n    const employees = useContext(EmployeesContext);\n\n    // This will represent the fields of the form\n    const [employeeState, setEmployeeState] = useState({\n        firstName: '',\n        lastName: '',\n        department: '',\n        role: '',\n        managerId: undefined\n    });\n\n    const clearFields = () => {\n        setEmployeeState({\n            firstName: '',\n            lastName: '',\n            department: '',\n            role: '',\n            managerId: undefined\n        });\n    }\n\n    const saveEmployee = employee => {\n        props.onComplete(employee);\n        clearFields();\n    }\n\n    return (\n        <div className=\"modal\" id=\"addEmployeeModal\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h4>Add Employee</h4>\n                    </div>\n                    <div className=\"modal-body\">\n                        <form>\n                            <Input \n                                name=\"firstName\" \n                                label=\"First Name\" \n                                onChange={e => setEmployeeState({ ...employeeState, firstName: e.target.value })} \n                                value={employeeState.firstName} \n                            />\n                            <Input \n                                name=\"lastName\" \n                                label=\"Last Name\" \n                                onChange={e => setEmployeeState({ ...employeeState, lastName: e.target.value })}   \n                                value={employeeState.lastName} \n                            />\n                            <Input \n                                name=\"department\" \n                                label=\"Department\" \n                                onChange={e => setEmployeeState({ ...employeeState, department: e.target.value })} \n                                value={employeeState.department} \n                            />\n                            <Input \n                                name=\"role\" \n                                label=\"Role\" \n                                onChange={e => setEmployeeState({ ...employeeState, role: e.target.value })}\n                                value={employeeState.role} \n                            />\n                            <Select \n                                name=\"manager\"\n                                label=\"Manager\"\n                                /* managerId is the only field that needs to be an int. The way I set this up, `parseInt` should never fail when not desired. */\n                                onChange={e => setEmployeeState({ ...employeeState, managerId: parseInt(e.target.value) })} \n                                value={employeeState.managerId} \n                                defaultValue={undefined}\n                            >\n                                <option value={undefined}>-- None --</option>\n                                {employees.map(e => <option value={e.id}>{e.firstName} {e.lastName}</option>)}\n                            </Select>\n                        </form>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button onClick={e => saveEmployee(employeeState)} className=\"btn btn-success\" data-dismiss=\"modal\">Save</button>\n                        <button className=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\n\nexport default function Table(props) {\n    // I'm making the Bootstrap table types (table-dark, table-striped, etc) into \n    // toggles so it's easier to just make a table dark, striped, etc.\n    const { dark, striped, bordered, hoverable, small } = props;\n\n    // \"fold\" the table types into a single string that will be the class list for the table\n    const tableClasses = [\n        [dark, 'dark'],\n        [striped, 'striped'],\n        [bordered, 'bordered'],\n        [hoverable, 'hover'],\n        [small, 'sm']\n    ].reduce(\n        (acc, next) => {\n            const [toggle, value] = next;\n            return toggle ? acc + ` table-${value}` : acc;\n        }, \n        // All Bootstrap tables need the table class to get styled\n        // So I made it the initial value for reduce\n        'table'\n    );\n\n    return (\n        <table className={tableClasses}>\n            {props.children}\n        </table>\n    );\n}","import React from 'react';\n\nexport default function THead(props) {\n    let theadClass = '';\n    if (props.dark) {\n        theadClass = 'thead-dark';\n    } else if (props.light) {\n        theadClass = 'thead-light';\n    }\n\n    return (\n        <thead className={theadClass}>\n            {props.children}\n        </thead>\n    )\n}","import React from 'react';\n\nexport default function TRow(props) {\n    return (\n        <tr className={props.context && `table-${props.context}`}>\n            {props.children}\n        </tr>\n    );\n}","import React from 'react';\n\nexport default function TData(props) {\n    return (\n        <td className={props.context && `table-${props.context}`}>\n            {props.children}\n        </td>\n    );\n}","import React from 'react';\n\nexport default function THeaderCell(props) {\n    // For this implementation, I'm giving headers an onClick event for sorting the table by the clicked column\n    return (\n        <th onClick={props.onClick}>\n            {props.children}\n        </th>\n    )\n}","import React, { useState, useContext } from 'react';\nimport { Table, THead, TRow, TData, THeaderCell } from './Table';\nimport EmployeesContext from '../utils/EmployeesContext';\n\n/**\n * Compares two employees according to the provided field\n */\nfunction compareEmployeesBy(field, e1, e2) {\n    const p1 = e1[field];\n    const p2 = e2[field];\n\n    // The fields of an employee are either a string or a number\n    if (typeof p1 === 'string') {\n        // Subtracting between strings is not a thing you can do in JS\n        // Why ECMA don't just define it as something like this is beyond me\n        return (p1 > p2) ? 1 : -1;\n    } else if (typeof p1 === 'number') {\n        return p1 - p2;\n    }\n\n    return 0;\n}\n\nexport default function EmployeeTable(props) {\n    // We're tracking the sorting criterion inside this component\n    const [sortCriterion, setSortCriterion] = useState('id');\n\n    // ...while the list of employees is provided\n    const employees = useContext(EmployeesContext);\n\n    return (\n        <Table striped hoverable>\n            <THead>\n                <TRow>\n                    <THeaderCell onClick={e => setSortCriterion('id')}>ID</THeaderCell>\n                    <THeaderCell onClick={e => setSortCriterion('firstName')}>First Name</THeaderCell>\n                    <THeaderCell onClick={e => setSortCriterion('lastName')}>Last Name</THeaderCell>\n                    <THeaderCell onClick={e => setSortCriterion('department')}>Department</THeaderCell>\n                    <THeaderCell onClick={e => setSortCriterion('role')}>Role</THeaderCell>\n                    <THeaderCell onClick={e => setSortCriterion('managerId')}>Manager</THeaderCell>\n                </TRow>\n            </THead>\n            <tbody>\n                {\n                    employees\n                        .sort((e1, e2) => compareEmployeesBy(sortCriterion, e1, e2))\n                        .map(e => {\n                            // The \"Manager\" column should display a manager's full name rather than their ID\n                            const manager = e.managerId && employees.filter(m => m.id === e.managerId)[0];\n                            return ( \n                                <TRow>\n                                    <TData>{e.id}</TData>\n                                    <TData>{e.firstName}</TData>\n                                    <TData>{e.lastName}</TData>\n                                    <TData>{e.department}</TData>\n                                    <TData>{e.role}</TData>\n                                    <TData>{manager && `${manager.firstName} ${manager.lastName}`}</TData>\n                                </TRow>\n                            )                        \n                        })\n                }\n            </tbody>\n        </Table>\n    );\n}","import React, { useState } from 'react';\nimport AddEmployeeModal from '../AddEmployeeModal';\nimport EmployeeTable from '../EmployeeTable';\nimport EmployeesContext from '../../utils/EmployeesContext';\nimport employeeList from '../../data/employees.json';\n\n/**\n * The home page of the app\n */\nexport default function Home() {\n    // Initial list of employees\n    const [employees, setEmployees] = useState(employeeList);\n\n    // Statelessly appends to the employees list\n    const addEmployee = newEmployee => \n        setEmployees([...employees, { id: employees.length + 1, ...newEmployee} ]);\n\n    return (\n        <main>\n            <h1>Employee Directory</h1>\n            <button className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#addEmployeeModal\">Add Employee</button>\n            <EmployeesContext.Provider value={employees}>\n                <EmployeeTable />\n                <AddEmployeeModal onComplete={addEmployee} />\n            </EmployeesContext.Provider>\n        </main>\n    );\n}","import './App.css';\nimport Home from './components/pages/Home';\n\nfunction App() {\n    return <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}